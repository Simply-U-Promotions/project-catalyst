name: Chaos Engineering Tests

on:
  schedule:
    - cron: '0 2 * * 1' # Run weekly on Mondays at 2 AM UTC
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '22.x'

jobs:
  chaos-tests:
    name: Chaos Engineering Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start application
        run: |
          pnpm dev &
          sleep 30
        env:
          NODE_ENV: test

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: Run Database Chaos Tests
        run: k6 run --env SCENARIO=db_chaos chaos-tests/chaos-scenarios.js
        env:
          BASE_URL: http://localhost:3000
        continue-on-error: true

      - name: Run Network Chaos Tests
        run: k6 run --env SCENARIO=network_chaos chaos-tests/chaos-scenarios.js
        env:
          BASE_URL: http://localhost:3000
        continue-on-error: true

      - name: Run Resource Exhaustion Tests
        run: k6 run --env SCENARIO=resource_chaos chaos-tests/chaos-scenarios.js
        env:
          BASE_URL: http://localhost:3000
        continue-on-error: true

      - name: Upload chaos test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: chaos-test-results
          path: chaos-test-summary.json
          retention-days: 90

      - name: Analyze results
        if: always()
        run: |
          echo "=== Chaos Test Results Analysis ==="
          if [ -f chaos-test-summary.json ]; then
            cat chaos-test-summary.json | jq '.metrics.error_recovery.values.rate' || echo "No error recovery data"
          fi

      - name: Create issue if tests fail
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Chaos Engineering Tests Failed',
              body: `Chaos engineering tests failed on ${new Date().toISOString()}.\n\nPlease review the test results and address any resilience issues.\n\nWorkflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              labels: ['chaos-test-failure', 'resilience', 'needs-investigation']
            })

      - name: Notify on Slack
        if: failure()
        run: |
          echo "Chaos tests failed - would send Slack notification here"
          # Add Slack webhook notification
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"Chaos Engineering Tests Failed"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
