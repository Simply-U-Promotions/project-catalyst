import { int, mysqlEnum, mysqlTable, text, timestamp, varchar } from "drizzle-orm/mysql-core";

/**
 * Core user table backing auth flow.
 * Extend this file with additional tables as your product grows.
 * Columns use camelCase to match both database fields and generated types.
 */
export const users = mysqlTable("users", {
  /**
   * Surrogate primary key. Auto-incremented numeric value managed by the database.
   * Use this for relations between tables.
   */
  id: int("id").autoincrement().primaryKey(),
  /** Manus OAuth identifier (openId) returned from the OAuth callback. Unique per user. */
  openId: varchar("openId", { length: 64 }).notNull().unique(),
  name: text("name"),
  email: varchar("email", { length: 320 }),
  loginMethod: varchar("loginMethod", { length: 64 }),
  role: mysqlEnum("role", ["user", "admin"]).default("user").notNull(),
  createdAt: timestamp("createdAt").defaultNow().notNull(),
  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow().notNull(),
  lastSignedIn: timestamp("lastSignedIn").defaultNow().notNull(),
});

export type User = typeof users.$inferSelect;
export type InsertUser = typeof users.$inferInsert;

/**
 * Projects table - stores user-created applications
 */
export const projects = mysqlTable("projects", {
  id: int("id").autoincrement().primaryKey(),
  userId: int("userId").notNull().references(() => users.id),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  status: mysqlEnum("status", ["draft", "generating", "ready", "deploying", "deployed", "failed"]).default("draft").notNull(),
  templateId: int("templateId"),
  deploymentProvider: mysqlEnum("deploymentProvider", ["vercel", "railway", "kubernetes"]).default("vercel"),
  githubRepoUrl: varchar("githubRepoUrl", { length: 500 }),
  isImported: int("isImported").default(0), // 0 = new project, 1 = imported from existing repo
  deploymentUrl: varchar("deploymentUrl", { length: 500 }),
  createdAt: timestamp("createdAt").defaultNow().notNull(),
  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow().notNull(),
});

export type Project = typeof projects.$inferSelect;
export type InsertProject = typeof projects.$inferInsert;

/**
 * Conversations table - stores AI chat history for project generation
 */
export const conversations = mysqlTable("conversations", {
  id: int("id").autoincrement().primaryKey(),
  projectId: int("projectId").notNull().references(() => projects.id),
  role: mysqlEnum("role", ["user", "assistant", "system"]).notNull(),
  content: text("content").notNull(),
  createdAt: timestamp("createdAt").defaultNow().notNull(),
});

export type Conversation = typeof conversations.$inferSelect;
export type InsertConversation = typeof conversations.$inferInsert;

/**
 * Generated files table - stores code files generated by AI
 */
export const generatedFiles = mysqlTable("generatedFiles", {
  id: int("id").autoincrement().primaryKey(),
  projectId: int("projectId").notNull().references(() => projects.id),
  filePath: varchar("filePath", { length: 500 }).notNull(),
  content: text("content").notNull(),
  language: varchar("language", { length: 50 }),
  createdAt: timestamp("createdAt").defaultNow().notNull(),
});

export type GeneratedFile = typeof generatedFiles.$inferSelect;
export type InsertGeneratedFile = typeof generatedFiles.$inferInsert;

/**
 * Deployments table - tracks deployment history and status
 */
export const deployments = mysqlTable("deployments", {
  id: int("id").autoincrement().primaryKey(),
  projectId: int("projectId").notNull().references(() => projects.id),
  provider: mysqlEnum("provider", ["vercel", "railway", "kubernetes"]).default("vercel").notNull(),
  providerDeploymentId: varchar("providerDeploymentId", { length: 255 }),
  status: mysqlEnum("status", ["pending", "building", "deploying", "success", "failed"]).default("pending").notNull(),
  deploymentUrl: varchar("deploymentUrl", { length: 500 }),
  logs: text("logs"),
  errorMessage: text("errorMessage"),
  createdAt: timestamp("createdAt").defaultNow().notNull(),
  completedAt: timestamp("completedAt"),
});

export type Deployment = typeof deployments.$inferSelect;
export type InsertDeployment = typeof deployments.$inferInsert;

/**
 * Templates table - predefined project templates
 */
export const templates = mysqlTable("templates", {
  id: int("id").autoincrement().primaryKey(),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  category: varchar("category", { length: 100 }),
  icon: varchar("icon", { length: 100 }),
  techStack: text("techStack"),
  isActive: int("isActive").default(1).notNull(),
  createdAt: timestamp("createdAt").defaultNow().notNull(),
});

export type Template = typeof templates.$inferSelect;
export type InsertTemplate = typeof templates.$inferInsert;

/**
 * Provisioned databases for projects
 */
export const provisionedDatabases = mysqlTable("provisioned_databases", {
  id: int("id").autoincrement().primaryKey(),
  projectId: int("projectId").notNull().references(() => projects.id),
  type: mysqlEnum("type", ["postgresql", "mysql", "mongodb", "redis"]).notNull(),
  name: varchar("name", { length: 255 }).notNull(),
  host: varchar("host", { length: 255 }).notNull(),
  port: int("port").notNull(),
  username: varchar("username", { length: 255 }).notNull(),
  password: varchar("password", { length: 255 }).notNull(),
  database: varchar("database", { length: 255 }).notNull(),
  status: mysqlEnum("status", ["provisioning", "active", "failed", "deleted"]).default("provisioning").notNull(),
  connectionString: text("connectionString"),
  size: varchar("size", { length: 50 }).default("small"),
  createdAt: timestamp("createdAt").defaultNow().notNull(),
  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow().notNull(),
});

export type ProvisionedDatabase = typeof provisionedDatabases.$inferSelect;
export type InsertProvisionedDatabase = typeof provisionedDatabases.$inferInsert;

/**
 * LLM API usage tracking for cost monitoring
 */
export const llmApiCalls = mysqlTable("llm_api_calls", {
  id: int("id").autoincrement().primaryKey(),
  userId: int("userId").notNull().references(() => users.id),
  projectId: int("projectId").references(() => projects.id),
  feature: mysqlEnum("feature", ["code_generation", "codebase_analysis", "code_modification", "chat"]).notNull(),
  model: varchar("model", { length: 100 }).notNull(),
  promptTokens: int("promptTokens").notNull(),
  completionTokens: int("completionTokens").notNull(),
  totalTokens: int("totalTokens").notNull(),
  estimatedCost: int("estimatedCost").notNull(), // Cost in cents (e.g., 150 = $1.50)
  responseTime: int("responseTime"), // Response time in milliseconds
  success: int("success").default(1).notNull(), // 1 = success, 0 = failed
  errorMessage: text("errorMessage"),
  createdAt: timestamp("createdAt").defaultNow().notNull(),
});

export type LlmApiCall = typeof llmApiCalls.$inferSelect;
export type InsertLlmApiCall = typeof llmApiCalls.$inferInsert;

/**
 * User cost summary for quick lookups
 */
export const userCostSummary = mysqlTable("user_cost_summary", {
  id: int("id").autoincrement().primaryKey(),
  userId: int("userId").notNull().unique().references(() => users.id),
  totalCalls: int("totalCalls").default(0).notNull(),
  totalTokens: int("totalTokens").default(0).notNull(),
  totalCost: int("totalCost").default(0).notNull(), // Cost in cents
  monthlyCallsCount: int("monthlyCallsCount").default(0).notNull(),
  monthlyCost: int("monthlyCost").default(0).notNull(), // Cost in cents for current month
  lastCallAt: timestamp("lastCallAt"),
  updatedAt: timestamp("updatedAt").defaultNow().onUpdateNow().notNull(),
});

export type UserCostSummary = typeof userCostSummary.$inferSelect;
export type InsertUserCostSummary = typeof userCostSummary.$inferInsert;